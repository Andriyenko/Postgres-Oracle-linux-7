
Перейти к концу метаданных
Создатель Андриенко Владимир Александрович, отредактировано мая 18, 2018
Переход к началу метаданных
подключаем репозиторий 

Подключение repo под Oracle Linux:

sudo rpm -ivh http://repo.postgrespro.ru/pgpro-10/keys/postgrespro-std-10.oraclelinux.pro.yum-1.0-1.noarch.rpm
значение переменных LC_CTYPE и LC_COLLATE должно быть равно «ru_RU.UTF8» (значение «en_US.UTF8» тоже подходит, но менее предпочтительно). При необходимости установите эти переменные:

export LC_CTYPE=ru_RU.UTF8 

Пакеты Postgres Pro:



postgrespro-std-10

Пакет верхнего уровня, устанавливающий и настраивающий Postgres Pro для серверных и клиентских систем. Не используйте этот пакет при обновлении или миграции.

postgrespro-std-10-client

Стандартные клиентские приложения, такие как psql и pg_dump.

postgrespro-std-10-libs

Общие библиотеки, требующиеся для развёртывания клиентских приложений, включая libpq; библиотеки времени выполнения для обработчика ECPG.

postgrespro-std-10-server

Сервер Postgres Pro и серверный язык программирования PL/pgSQL.

postgrespro-std-10-contrib

Дополнительные расширения и программы, разворачиваемые на серверах баз данных.

postgrespro-std-10-pgprobackup

Утилита pg_probackup.

postgrespro-std-10-devel

Заголовочные файлы и библиотеки для разработки клиентских приложений и серверных расширений.

В системах на базе Debian этот пакет называется postgrespro-std-10-dev.

postgrespro-std-10-plperl

Реализация языка Perl для программирования на стороне сервера.

postgrespro-std-10-plpython

Реализация языка Python для программирования на стороне сервера.

postgrespro-std-10-plpython3

Реализация языка Python 3 для программирования на стороне сервера.

Этот пакет представлен только для систем на базе Debian.

postgrespro-std-10-pltcl

Реализация языка Tcl для программирования на стороне сервера.

postgrespro-std-10-docs

Документация на английском языке.

postgrespro-std-10-docs-ru

Документация на русском языке.

postgrespro-std-10-test

Тестовые скрипты для сервера.

Этот пакет представлен только для систем на базе RHEL и SUSE.

Кроме того, Postgres Pro предоставляет отдельные пакеты с отладочной информацией для некоторых операционных систем:

В системах на базе Debian это пакет postgrespro-std-10-dbg.

В системах на базе RHEL это пакет postgrespro-std-10-debuginfo.

В Альт Линукс для всех пакетов с двоичными файлами имеются соответствующие пакеты -debuginfo.

Для серверных инсталляций требуются как минимум следующие пакеты:

postgrespro-std-10-server

postgrespro-std-10-client

postgrespro-std-10-libs

Установка postgres  (подтянет зависимости, установит, настроит службу на автозапуск, создаст пользователя postgres)

yum install postgrespro-std-10 (установить требуемые пакеты подтянуться как зависимости)

Включаем автозапуск:

pg-setup service enable


Настройки сервера для PostgreSQL

Рекомендуется отключать HyperThreading. Для программ типа систем управления базами данных от него скорее вред чем польза.
Также рекомендуется отключать Energy Saving, поскольку в противном случае могут непредсказуемо вырастать задержки ответов БД.
Надо запретить своппинг разделяемой памяти SYSV/posix (FreeBSD: kern.ipc.shm_use_phys=1)
Установка Postgres 9.6 на oracle linux 7
curl http://1c.postgrespro.ru/keys/GPG-KEY-POSTGRESPRO-1C > GPG-KEY-POSTGRESPRO-1C
rpm --import GPG-KEY-POSTGRESPRO-1C
echo [postgrespro-1c] > /etc/yum.repos.d/postgrespro-1c.repo
echo name=Postgres Pro 1C repo >> /etc/yum.repos.d/postgrespro-1c.repo
echo baseurl=http://1c.postgrespro.ru/archive/2018_03_02/rpm/9.6/oraclelinux-7Server-x86_64/ >> /etc/yum.repos.d/postgrespro-1c.repo
echo gpgcheck=1 >> /etc/yum.repos.d/postgrespro-1c.repo
echo enabled=1 >> /etc/yum.repos.d/postgrespro-1c.repo
yum makecache
yum install -y postgresql96-server-9.6.8-1.1C.x86_64

yum install postgresql96-pltcl.x86_64 postgresql96-plpython.x86_64 postgresql96-plperl.x86_64 postgresql96-docs.x86_64 postgresql96-devel.x86_64 postgresql96-contrib.x86_64 postgresql96.x86_64 postgresql96-debuginfo.x86_64 postgresql96-test.x86_64

Заходим под пользователем posgtres для инициализации базы бд

sudo su postgres

/usr/pgsql-9.6/bin/pg_ctl -D /var/lib/postgresql/9.6/main/ -l /var/log/postgres/posgresql.log start

Создаем демона postgres.service

vi /etc/systemd/system/postgresql.service :



[Unit]
Description=PostgreSQL database server
Documentation=man:postgres(1)

[Service]
Type=notify
User=postgres
ExecStart=/usr/pgsql-9.6/bin/postgres -D /var/lib/postgresql/9.6/main
ExecReload=/bin/kill -HUP $MAINPID
KillMode=mixed
KillSignal=SIGINT
TimeoutSec=0


[Install]
WantedBy=multi-user.target

на папки логов, базы назначить пользователя postgres

systemctl daemon-reload

systemctl enable postgresql.service

systemctl start postgresql.service

Далее согласно рекомендациям 1с настраиванием /var/lib/pgpro/std-10/data/postgresql.conf:
shared_buffers = RAM/4

Количество памяти, выделенной PgSQL для совместного кеша страниц. Эта память разделяется между всеми процессами PgSQL.

temp_buffers = 256MB
Максимальное количество страниц для временных таблиц. Т.е. это верхний лимит размера временных таблиц в каждой сессии.

work_mem = RAM/32..64 или 32MB..128MB
Лимит памяти для обработки одного запроса. Эта память индивидуальна для каждой сессии. Теоретически, максимально потребная память равна max_connections * work_mem, на практике такого не встречается потому что большая  часть сессий почти всегда висит в ожидании. Это рекомендательное значение используется оптимайзером: он пытается предугадать размер необходимой памяти для запроса, и, если это значение больше work_mem, то указывает экзекьютору сразу создать временную таблицу. work_mem не является в полном смысле лимитом: оптимайзер может и промахнуться, и запрос займёт больше памяти, возможно в разы. Это значение можно уменьшать, следя за количеством создаваемых временных файлов: 

select maintenance_work_mem = RAM/16..32 или work_mem * 4 или 256MB..4GB

Лимит памяти для обслуживающих задач, например вакуум, автовакуум или создания индексов.

effective_cache_size = RAM - shared_buffers
Оценка размера кеша файловой системы. Увеличение параметра увеличивает склонность системы выбирать IndexScan планы. И это хорошо.

effective_io_concurrency = 2

Оценочное значение одновременных запросов к дисковой системе, которые она может обслужить единовременно. Для одиночного диска = 1, для RAID - 2 или больше.

random_page_cost = 1.5-2.0 для RAID, 1.1-1.3 для SSD

Стоимость чтения рандомной страницы (по-умолчанию 4). Чем меньше seek time дисковой системы тем меньше (но > 1.0) должен быть этот параметр. Излишне большое значение параметра увеличивает склонность PgSQL к выбору планов с сканированием всей таблицы (PgSQL считает, что дешевле последовательно читать всю таблицу, чем рандомно индекс). И это плохо.

autovacuum = on
Включение автовакуума. Не выключайте его!

autovacuum_max_workers = NCores/4..2 но не меньше 4

Количество процессов автовакуума. Общее правило - чем больше write-запросов, тем больше процессов. На read-only базе данных достаточно одного процесса.

autovacuum_naptime = 20s
Время сна процесса автовакуума. Слишком большая величина будет приводить к тому, что таблицы не будут успевать вакуумиться и, как следствие, вырастет bloat и размер таблиц и индексов. Малая величина приведет к бесполезному нагреванию.

bgwriter_delay = 20ms
Время сна между циклами записи на диск фонового процесса записи. Данный процесс ответственен за синхронизацию страниц, расположенных в shared_buffers с диском. Слишком большое значение этого параметра приведет к возрастанию нагрузки на  checkpoint процесс и процессы, обслуживающие сессии (backend). Малое значение приведет к полной загрузке одного из ядер.

bgwriter_lru_multiplier = 4.0
bgwriter_lru_maxpages = 400
Параметры, управляющие интенсивностью записи фонового процесса записи. За один цикл bgwriter записывает не больше, чем было записано в прошлый цикл, умноженное на bgwriter_lru_multiplier, но не больше чемbgwriter_lru_maxpages.

synchronous_commit = off
Выключение синхронизации с диском в момент коммита. Создает риск потери последних нескольких транзакций (в течении 0.5-1 секунды), но гарантирует целостность базы данных, в цепочке коммитов гарантированно отсутствуют пропуски. Но значительно увеличивает производительность.

checkpoint_segments = 32..256 < 9.5
Максимальное количество сегментов WAL между checkpoint. Слишком частые checkpoint  приводят к значительной нагрузке на дисковую подсистему по записи. Каждый сегмент имеет размер 16MB

checkpoint_completion_target = 0.5..0.9

Степень "размазывания" checkpoint'a. Скорость записи во время checkpoint'а регулируется так, что бы время checkpoint'а было равно времени, прошедшему с прошлого, умноженному на checkpoint_completion_target.

min_wal_size = 512MB .. 4G         > =9.5
max_wal_size = 2 * min_wal_size    > =9.5

Минимальное и максимальный объем WAL файлов. Аналогично checkpoint_segments

ssl = off

Выключение шифрования. Для защищенных ЦОД'ов шифрование бессмысленно, но приводит к увеличению загрузки CPU

fsync = on

Выключение параметра приводит к росту производительности, но появляется значительный риск потери всех данных при внезапном выключении питания. Внимание: если RAID имеет кеш и находиться в режиме write-back, проверьте наличие и функциональность батарейки кеша RAID контроллера! Иначе данные записанные в кеш RAID могут быть потеряны при выключении питания, и, как следствие, PgSQL не гарантирует целостность данных.

commit_delay = 1000

commit_siblings = 5

Групповой коммит нескольких транзакций. Имеет смысл включать, если темп транзакций превосходит 1000 TPS. Иначе эффекта не имеет.

temp_tablespaces = 'NAME_OF_TABLESPACE'

Дисковое пространство для временных таблиц/индексов. Помещение временных таблиц/индексов на отдельные диски может увеличить производительность. Предварительно надо создать tablespace командой CREATE TABLESPACE. Если характеристики дисков отличаются от основных дисков, то следует в команде указать соответствующий random_page_cost. См. статью.

row_security = off               >= 9.5

Отключение контроля разрешения уровня записи

max_files_per_process = 1000 (default)

Максимальное количество открытых файлов на один процесс PostreSQL. Один файл это как минимум либо индекс либо таблица, но таблица/может состоять из нескольких файлов. Если PostgreSQL упирается в этот лимит, он начинает открывать/закрывать файлы, что может сказываться на производительности. Диагностировать проблему под Linux можно с помощью команды lsof.

log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'

имя файла лога

log_rotation_size = 1GB 

ротация логов

log_directory = '/var/log/postgres/' 

путь к файлу логов

Открытие порта 5432 и доступ для всех

listen_addresses = '*' 

port = 5432

firewall-cmd --zone=public --add-port=5432/tcp --permanent
[root@perm-psql-ukf andrienko_va]# firewall-cmd --reload
